/*
  Pizza delivery System - UML class diagram written in Umple
*/

//Namespace for core of the system.
namespace ca.mcgill.ecse.pds.model;

use PDSPersistence.ump;

class PDS {
 1 <@>- * Pizza pizzas;
 1 <@>- * Customer customers;
 1 <@>- * Ingredient ingredients;
 * -> * Ingredient commonIngredients;
 1 <@>- * Order orders;
 1 <@>- 1 Menu menu;
}

//Pizza abstract
class Pizza {
  Integer size = 12;
  * -> 1..* Ingredient ingredients;
  Float price;
  before constructor, setPrice {
    if (aPrice <= 0.0f ) {
	  throw new RuntimeException("The price for a pizza cannot be less than zero.");
	}
  }
}

class Menu {
 1 <@>- * MenuPizza menupizzas;
 1 <@>- 0..1 CustomPizza custompizza;
}

class MenuPizza {
  isA Pizza;
  String name;
  before constructor, setName {
    if (aName == null || aName.length() == 0) {
	  throw new RuntimeException("The name for a pizza on the Menu cannot be empty.");
	}
  }
  Float calorieCount;
  before constructor, setCalorieCount {
    if (aCalorieCount <= 0.0f ) {
	  throw new RuntimeException("The calorie count for a pizza on the Menu cannot be less than zero.");
	}
  }
}

class CustomPizza {
  isA Pizza;
}

class Ingredient {
  String name;
  before constructor, setName {
    if (aName == null || aName.length() == 0) {
	  throw new RuntimeException("The name of an ingredient cannot be empty.");
	}
  }
  Float price;
  before constructor, setPrice {
    if (aPrice <= 0.0f) {
	  throw new RuntimeException("The price cannot be less than zero");
	}
  }
}
class Customer {
  autounique id;
  String name;
  String phoneNumber;
  String emailAddress;
  String deliveryAddress;
  before constructor {
  	if ((aPhoneNumber == null || aPhoneNumber.length() == 0 ) && (aEmailAddress == null || aEmailAddress.length() == 0)) {
	  throw new RuntimeException("PhoneNumber or Email Address must be provided");
	}
  }
  1 -- * Order orders;
}

class Order {
  autounique number;
  Date date;
  Integer quantity = 1;
  Boolean isDelivered = false;
  1 <@>- 1..* OrderItem orderItems;
  public float getTotalPrice() {
  	float totalPrice = 0;
  	for(OrderItem o : this.getOrderItems()) {
  		totalPrice += o.getCost();
  	}
  	return totalPrice;
  }	
}

class OrderItem {
  * -> 1 Pizza pizza;
  * -> * Ingredient additionalIngredients;
  * -> * Ingredient removedIngredients;
  public float getCost() {
  	float cost = 0;
  	float additionalIngredientsCost = 0;
  	float removedIngredientsReductionValue = 0;
  	for(Ingredient i: this.getAdditionalIngredients()){
  		removedIngredientsReductionValue += i.getPrice(); 
  	}
  	for(Ingredient i: this.getRemovedIngredients()){
  		removedIngredientsReductionValue += i.getPrice(); 
  	}
  	cost = pizza.getPrice() + removedIngredientsReductionValue + (0.5f * removedIngredientsReductionValue);
  	return cost;
  }
}